{"version":3,"sources":["ListBooks.js","SearchBooks.js","BooksAPI.js","App.js","index.js"],"names":["ListBooks","_this","this","react_default","a","createElement","className","props","shelves","filter","shelf","visibleShelf","map","key","id","label","books","book","imageLinks","thumbnail","length","style","width","height","backgroundImage","concat","value","onChange","event","onShelfMove","disabled","title","authors","author","Link","to","Component","SearchBooks","onClick","onSearch","type","placeholder","document","getElementById","searchResults","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","bookId","fetch","then","res","json","data","getAll","update","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","BooksApp","state","searchBooks","BooksAPI","error","forEach","result","index","setState","updateShelves","newShelf","target","newShelfLabel","searchPageUpdates","construct","Array","toConsumableArray","searchResult","alert","_this2","_this3","Route","exact","path","render","src_SearchBooks","src_ListBooks","ReactDOM","BrowserRouter","src_App"],"mappings":"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","file":"static/js/main.2cde77a7.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass ListBooks extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"list-books\">\r\n                <div className=\"list-books-title\">\r\n                    <h1>MyReads</h1>\r\n                </div>\r\n                <div className=\"list-books-content\">\r\n                    <div>\r\n                        {this.props.shelves.filter(shelf => shelf.visibleShelf === true).map((shelf) => (\r\n                            <div className=\"bookshelf\" key={shelf.id}>\r\n                                <h2 className=\"bookshelf-title\">{shelf.label}</h2>\r\n                                <div className=\"bookshelf-books\">\r\n                                    <ol className=\"books-grid\">\r\n                                        {this.props.books.filter(book => book.shelf === shelf.id).map((book) => (\r\n                                            <li id={book.id} key={book.id}>\r\n                                                <div className=\"book\">\r\n                                                    <div className=\"book-top\">\r\n                                                        {(typeof book.imageLinks !== 'undefined' && typeof book.imageLinks.thumbnail !== 'undefined' && book.imageLinks.thumbnail.length > 0)\r\n                                                            ? <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks.thumbnail})` }}></div>\r\n                                                            : <div className=\"book-cover\" style={{ width: 128, height: 193 }}>[book cover unavailable]</div>\r\n                                                        }\r\n                                                        <div className=\"book-shelf-changer\">\r\n                                                            <select value={book.shelf} onChange={(event) => this.props.onShelfMove(book.id, event)}>\r\n                                                                <option value=\"move\" disabled>Move to...</option>\r\n                                                                {this.props.shelves.map((shelf) => (\r\n                                                                    <option value={shelf.id} key={shelf.id}>{shelf.label}</option>\r\n                                                                ))}\r\n                                                            </select>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    {(typeof book.title !== 'undefined' && book.title.length > 0)\r\n                                                        ? <div className=\"book-title\">{book.title}</div>\r\n                                                        : <div className=\"book-title\">[book title unknown]</div>\r\n                                                    }\r\n                                                    {(typeof book.authors !== 'undefined' && book.authors.length > 0)\r\n                                                        ? book.authors.map((author) => (\r\n                                                            <div className=\"book-authors\" key={book.id + ',' + author}>{author}</div>\r\n                                                        ))\r\n                                                        : < div className=\"book-authors\">[author unknown]</div>\r\n                                                    }\r\n                                                </div>\r\n                                            </li>\r\n                                        ))}\r\n                                    </ol>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <div className=\"open-search\">\r\n                    <Link className=\"open-search\" to='/search'>Add a book</Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListBooks","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass SearchBooks extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n                    <Link\r\n                        className=\"close-search\"\r\n                        to='/'\r\n                        onClick={() => this.props.onSearch(\"\")}\r\n                    >Close</Link>\r\n                    <div className=\"search-books-input-wrapper\">\r\n                        {/*\r\n              NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n              You can find these search terms here:\r\n              https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n              However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n              you don't find a specific author or title. Every search is limited by search terms.\r\n            */}\r\n                        <input\r\n                            id=\"bookSearchBox\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search by title or author\"\r\n                            onChange={() => this.props.onSearch(document.getElementById('bookSearchBox').value)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-books-results\">\r\n                    <ol className=\"books-grid\">\r\n                        {this.props.searchResults.map((book) => (\r\n                            <li id={book.id} key={book.id}>\r\n                                <div className=\"book\">\r\n                                    <div className=\"book-top\">\r\n                                        {(typeof book.imageLinks !== 'undefined' && typeof book.imageLinks.thumbnail !== 'undefined' && book.imageLinks.thumbnail.length > 0)\r\n                                            ? <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks.thumbnail})` }}></div>\r\n                                            : <div className=\"book-cover\" style={{ width: 128, height: 193 }}>[book cover unavailable]</div>\r\n                                        }\r\n                                        <div className=\"book-shelf-changer\">\r\n                                            {/* TODO improve speed by which new select value appears */}\r\n                                            <select value={book.shelf} onChange={(event) => this.props.onShelfMove(book.id, event)}>\r\n                                                <option value=\"move\" disabled>Move to...</option>\r\n                                                {this.props.shelves.map((shelf) => (\r\n                                                    <option value={shelf.id} key={shelf.id}>{shelf.label}</option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </div>\r\n                                    </div>\r\n                                    {(typeof book.title !== 'undefined' && book.title.length > 0)\r\n                                        ? <div className=\"book-title\">{book.title}</div>\r\n                                        : <div className=\"book-title\">[book title unknown]</div>\r\n                                    }\r\n                                    {(typeof book.authors !== 'undefined' && book.authors.length > 0)\r\n                                        ? book.authors.map((author) => (\r\n                                            <div className=\"book-authors\" key={book.id + ',' + author}>{author}</div>\r\n                                        ))\r\n                                        : < div className=\"book-authors\">[author unknown]</div>\r\n                                    }\r\n                                </div>\r\n                            </li>\r\n                        ))}\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBooks","\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n\r\n// // Sample API call #1\r\n// fetch('https://reactnd-books-api.udacity.com/books',\r\n//   {\r\n//     headers:\r\n//     {\r\n//       'Authorization': 'asdghk@9u3hf3ykdmvD'\r\n//     }\r\n//   })\r\n//   .then(function (response) {\r\n//     return response.json();\r\n//   }).then(function (myJSON) {\r\n//     console.log(myJSON);\r\n//   })\r\n\r\n// // Sample API call #2\r\n// BooksAPI.getAll()\r\n// .then(function (response) {\r\n//     return response;\r\n// }).then(function (myBooks) {\r\n//     console.log(myBooks);\r\n// });","import React, { Component } from 'react'\r\nimport { Route } from 'react-router-dom'\r\nimport ListBooks from './ListBooks.js'\r\nimport SearchBooks from './SearchBooks.js'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\n\r\nclass BooksApp extends Component {\r\n  state = {\r\n    books: [],\r\n    shelves: [ // TODO find way to handle dynamically\r\n      { id: 'currentlyReading', label: 'Currently Reading', visibleShelf: true },\r\n      { id: 'wantToRead', label: 'Want to Read', visibleShelf: true },\r\n      { id: 'read', label: 'Read', visibleShelf: true },\r\n      { id: 'none', label: 'None', visibleShelf: false }\r\n    ],\r\n    searchResults: []\r\n  }\r\n  componentDidMount() {\r\n    BooksAPI.getAll().then((books) => {\r\n      this.setState({ books: books })\r\n      // console.log(this.state.books)\r\n    })\r\n  }\r\n\r\n  searchBooks = (query) => {\r\n    // console.log(query);\r\n    // Search via API\r\n    if (typeof query !== 'undefined' && query.length > 0) {\r\n      BooksAPI.search(query).then((searchResults) => {\r\n        if (typeof searchResults !== 'undefined' && searchResults.error !== 'empty query') { // if search results defined and nonempty\r\n          searchResults.forEach((result, index) => {\r\n            // if book id is in books use books value, otherwise use 'none'\r\n            // console.log(this.state.books.filter(book => book.id === result.id)[0].shelf);\r\n            searchResults[index].shelf =\r\n              (this.state.books.filter(book => book.id === result.id).length === 1\r\n                ? this.state.books.filter(book => book.id === result.id)[0].shelf\r\n                : 'none'\r\n              );\r\n          }); // ...add shelf attribute...\r\n          this.setState({ searchResults: searchResults }); // ...and set state.\r\n        } else {\r\n          // console.log(searchResults);\r\n          this.setState({ searchResults: [] });\r\n        }\r\n      })\r\n    } else {\r\n      // console.log(\"no results shown\");\r\n      this.setState({ searchResults: [] });\r\n    }\r\n  }\r\n\r\n  updateShelves = (bookId, event) => {\r\n    let newShelf = event.target.value;\r\n    let newShelfLabel = this.state.shelves.filter(shelf => (shelf.id === newShelf))[0].label;\r\n    let searchPageUpdates = new Array(...this.state.searchResults);\r\n    // Update database\r\n    BooksAPI.get(bookId).then((book) =>\r\n      BooksAPI.update(book, newShelf)\r\n    )\r\n      .then(() => {\r\n        // Return updated book list from API\r\n        // TODO for efficiency make this update locally because do not have to pull all data again here\r\n        return BooksAPI.getAll();\r\n      }).then((books) => {\r\n        searchPageUpdates.forEach((searchResult, index) => {\r\n          if (searchResult.id === bookId) {\r\n            searchResult.shelf = newShelf;\r\n            this.setState({ searchResults: searchPageUpdates })\r\n            alert(`You have added \"${searchResult.title}\" to \"${newShelfLabel}.\"`)\r\n          }\r\n        })\r\n        return books;\r\n      }).then((books) => {\r\n        this.setState({ books: books })\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Route exact path='/search' render={() => (\r\n          <SearchBooks\r\n            books={this.state.books}\r\n            shelves={this.state.shelves}\r\n            searchResults={this.state.searchResults}\r\n            onSearch={(query) => {\r\n              this.searchBooks(query)\r\n            }}\r\n            onShelfMove={(bookId, event) => {\r\n              this.updateShelves(bookId, event)\r\n            }}\r\n          />\r\n        )} />\r\n        <Route exact path='/' render={() => (\r\n          <ListBooks\r\n            books={this.state.books}\r\n            shelves={this.state.shelves}\r\n            onShelfMove={(bookId, event) => {\r\n              this.updateShelves(bookId, event)\r\n            }}\r\n          />\r\n        )} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n    <BrowserRouter><App /></BrowserRouter>,\r\n    document.getElementById('root'))"],"sourceRoot":""}